<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" xmlns="*"
				xmlns:flexunit="flexunit.flexui.*"
				creationComplete="onCreationComplete()">
	
	<mx:Script>
		<![CDATA[
			import flexunit.framework.TestSuite;
			
			import org.granite.test.*;
			import org.granite.tide.test.*;
			import org.granite.tide.test.framework.*;
			import org.granite.tide.test.data.*;
			
			
			// After everything is built, configure the test
			// runner to use the appropriate test suite and
			// kick off the unit tests
			private function onCreationComplete():void {
				var ts:TestSuite = new TestSuite();
				createSuiteCore(ts);
				createSuiteTide(ts);
				createSuiteSeam(ts);
 				testRunner.test = ts;
 				testRunner.startTest();
 			}
			
			// Creates the test suite to run
			private function createSuiteCore(ts:TestSuite):void {
 				ts.addTest(new TestBasicMapGDS470());
 				// ts.addTest(new TestCollectionEnumExtGDS588());  Does not work now
			}
			
			// Creates the test suite to run
			private function createSuiteTide(ts:TestSuite):void {
 				ts.addTest(new TestSimpleComponent());
 				ts.addTest(new TestUIComponent());
				ts.addTest(new TestUIComponentGDS781());
				ts.addTest(new TestUIComponentGDS781b());
 				ts.addTest(new TestComponentScan());
 				ts.addTest(new TestAnnotatedComponent());
 				ts.addTest(new TestComponentInjection());
 				ts.addTest(new TestComponentInjection2());
 				ts.addTest(new TestComponentInjection3());
 				ts.addTest(new TestTypedInjection());
 				ts.addTest(new TestTypedInjection2());
 				ts.addTest(new TestTypedInjection3());
 				ts.addTest(new TestTypedRemoteInjection());
 				ts.addTest(new TestTypedLookup());
 				ts.addTest(new TestComponentOutjectionGDS427());
 				ts.addTest(new TestComponentOutjectionGDS449());
 				ts.addTest(new TestComponentOutjectionGDS745());
 				ts.addTest(new TestComponentOutjectionForum3853());
 				ts.addTest(new TestComponentInjectionForum4314());
 				ts.addTest(new TestComponentInjectionForum7129());
 				ts.addTest(new TestComponentInjectionGDS471());
 				ts.addTest(new TestComponentInjectionGDS477());
 				ts.addTest(new TestComponentInjectionGDS480());
 				ts.addTest(new TestComponentInjectionGDS482());
 				// ts.addTest(new TestComponentInjectionGDS676());
 				ts.addTest(new TestComponentProduces());
 				ts.addTest(new TestComponentProduces2());
 				ts.addTest(new TestComponentNoName());
				ts.addTest(new TestComponentNoName2());
 				ts.addTest(new TestComponentInOut());
 				ts.addTest(new TestComponentObservers());
 				ts.addTest(new TestComponentObservers2());
 				ts.addTest(new TestComponentObservers3());
 				ts.addTest(new TestComponentObserversGDS549());
 				ts.addTest(new TestComponentConversations());
 				ts.addTest(new TestComponentConversations2());
 				ts.addTest(new TestComponentNestedConversations());
 				ts.addTest(new TestComponentNestedConversations2());
				ts.addTest(new TestComponentEventScope());
 				ts.addTest(new TestComponentModules());
 				ts.addTest(new TestComponentModules2());
 				ts.addTest(new TestUIComponentModules());
 				ts.addTest(new TestComponentSubcontexts());
 				ts.addTest(new TestComponentSubcontexts2());
 				ts.addTest(new TestComponentSubcontexts3());
 				ts.addTest(new TestComponentSubcontexts4());
 				ts.addTest(new TestComponentSubcontextsGDS555());
 				ts.addTest(new TestComponentSubcontextsGDS627());
 				ts.addTest(new TestComponentOutjectionGDS481());
 				ts.addTest(new org.granite.tide.test.data.TestCollectionEnumExtGDS588());
 				ts.addTest(new TestMergeLazyEntity());
 				ts.addTest(new TestMergeLazyEntity2());
 				ts.addTest(new TestMergeDirtyEntity());
 				ts.addTest(new TestMergeConflictEntity());
 				ts.addTest(new TestMergeEntityConversation());
 				ts.addTest(new TestMergeEntityConversation2());
 				ts.addTest(new TestMergeEntityConversation3());
 				ts.addTest(new TestMergeEntityConversation4());
				ts.addTest(new TestMergeConflictEntityConversation());
 				ts.addTest(new TestMergeContexts());
 				ts.addTest(new TestEntityRefs());
 				ts.addTest(new TestDestroyContext());
 				ts.addTest(new TestDirtyCheckEntity());
 				ts.addTest(new TestDirtyCheckEntityGDS614());
 				ts.addTest(new TestDirtyCheckEntityEnum());
 				ts.addTest(new TestDirtyCheckEntityBigNumber());
 				ts.addTest(new TestResetEntityGDS453());
				// ts.addTest(new TestResetEntityGDS667());
				ts.addTest(new TestResetEntityGDS668());
				ts.addTest(new TestResetEntityEnum());
				ts.addTest(new TestResetEntityEnum2());
				ts.addTest(new TestResetEntityBigNumber());
				ts.addTest(new TestMergeEntityArray());
				ts.addTest(new TestMergeEntityEmbedded());
				ts.addTest(new TestMergeEntityXML());
 				ts.addTest(new TestMergeCollection());
 				ts.addTest(new TestMergeCollection2());
 				ts.addTest(new TestMergeCollection3());
 				ts.addTest(new TestMergeCollection4());
 				ts.addTest(new TestMergeCollection5());
 				ts.addTest(new TestMergeCollectionOfElementsGDS501());
 				ts.addTest(new TestMergeCollectionOfEntities());
 				ts.addTest(new TestMergeMap());
 				ts.addTest(new TestMergeMap2());
 				ts.addTest(new TestMergeMap3());
 				ts.addTest(new TestEjbClientPagedQuery());
 				ts.addTest(new TestEjbServerPagedQuery());
 				ts.addTest(new TestSeamClientPagedQuery());
 				ts.addTest(new TestSeamServerPagedQuery());
 				ts.addTest(new TestSpringClientPagedQuery());
 				ts.addTest(new TestSpringServerPagedQuery());
 				ts.addTest(new TestSpringPagedQueryController());
 				ts.addTest(new TestGrailsPagedQuery());
 			}
			
			// Creates the test suite to run
			private function createSuiteSeam(ts:TestSuite):void {
 				ts.addTest(new TestSeamSimpleCall());
 				ts.addTest(new TestSeamInjectedCall());
 				ts.addTest(new TestSeamInjectedCallGDS508());
 				ts.addTest(new TestSeamInjectedEntityCall());
 				ts.addTest(new TestSeamOutjectedCall());
 				ts.addTest(new TestSeamOutjectedEntityCall());
 				ts.addTest(new TestSeamIdentityGDS746());
 				
 				ts.addTest(new TestSeamMergeEntity());
 				ts.addTest(new TestSeamMergeArray());
 				ts.addTest(new TestSeamMergeCollection());
 				ts.addTest(new TestSeamMergeCollectionChange());
 				ts.addTest(new TestSeamMergeCollectionAdd());
 				ts.addTest(new TestSeamMergeCollectionUpdate());
 				ts.addTest(new TestSeamMergeCollectionOut());
 				
 				ts.addTest(new TestSeamMergeEntityColl());
 				ts.addTest(new TestSeamMergeEntityLazy());
 				ts.addTest(new TestSeamMergeEntityLazyRef());
 				ts.addTest(new TestSeamMergeEntityLazyVersion());
 				
 				ts.addTest(new TestSeamContextCleanAfterFault());
 				ts.addTest(new TestSeamContextCleanAfterFault2());
 				ts.addTest(new TestSeamContextUpdatedAfterFault());
 				
 				ts.addTest(new TestSeamCreateConversation());
 				ts.addTest(new TestSeamDestroyConversation());
 				ts.addTest(new TestSeamDestroyConversationGDS719());
 				ts.addTest(new TestSeamClientConversation());
 				ts.addTest(new TestSeamConversationScope());
				ts.addTest(new TestSeamConversationScope2());
 			}
		]]>
	</mx:Script>

	<!-- flexunit provides a very handy default test runner GUI -->
	<flexunit:TestRunnerBase id="testRunner" width="100%" height="100%" />
</mx:Application>