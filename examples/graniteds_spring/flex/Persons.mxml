<?xml version="1.0" encoding="utf-8"?>

<!--
  GRANITE DATA SERVICES
  Copyright (C) 2007-2010 ADEQUATE SYSTEMS SARL

  This file is part of Granite Data Services.

  Granite Data Services is free software; you can redistribute it and/or modify
  it under the terms of the GNU Library General Public License as published by
  the Free Software Foundation; either version 2 of the License, or (at your
  option) any later version.

  Granite Data Services is distributed in the hope that it will be useful, but
  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
  FITNESS FOR A PARTICULAR PURPOSE. See the GNU Library General Public License
  for more details.

  You should have received a copy of the GNU Library General Public License
  along with this library; if not, see <http://www.gnu.org/licenses/>.
-->

<mx:Application
    xmlns:mx="http://www.adobe.com/2006/mxml"
    xmlns="*"
    xmlns:cs="test.granite.components.*"
    xmlns:rs="test.granite.rpc.remoting.mxml.*"
    xmlns:et="test.granite.ejb3.entity.*"
    layout="vertical"
    backgroundGradientColors="[#0e2e7d, #6479ab]"
    initialize="init()">

    <mx:Script>
        <![CDATA[
            import flash.utils.ByteArray;

            import mx.collections.ArrayCollection;
            import mx.collections.Sort;
            import mx.controls.Alert;
            import mx.events.CloseEvent;
            import mx.rpc.events.ResultEvent;
            import mx.rpc.events.FaultEvent;
            import mx.rpc.remoting.mxml.Operation;
			import mx.messaging.*;
			import mx.messaging.channels.*;
            import mx.utils.ArrayUtil;
            import mx.utils.ObjectUtil;
            import mx.utils.ObjectProxy;

            import org.granite.rpc.remoting.mxml.SecureRemoteObject;
            import org.granite.events.SecurityEvent;

            import test.granite.ejb3.entity.Address;
            import test.granite.ejb3.entity.Country;
            import test.granite.ejb3.entity.types.DocumentedEntity;
            import test.granite.ejb3.entity.embed.Document;

            [Bindable]
            private var srv:SecureRemoteObject = null;

            [Bindable]
            [ArrayElementType("test.granite.ejb3.entity.Person")]
            private var personsModel:ArrayCollection = new ArrayCollection();

            public function init():void {
                srv = new SecureRemoteObject("personService");
				srv.source = "personService";
				srv.channelSet = new ChannelSet();
				srv.channelSet.addChannel(new AMFChannel("graniteamf", "http://{server.name}:{server.port}/graniteds-spring/graniteamf/amf"));
                srv.showBusyCursor = true;
                var operation:Operation = new Operation();
                operation.name = "findAllPersons";
                operation.addEventListener(ResultEvent.RESULT, onFindAllPersonsResult);
                srv.operations = {findAllPersons: operation};
                srv.addEventListener(FaultEvent.FAULT, onRemoteFault);
                srv.addEventListener(SecurityEvent.ALL, onSecurityEvent);
                srv.findAllPersons();
            }

            public function onSecurityEvent(event:SecurityEvent):void {
                trace("onSecurityEvent: " + event);
                switch (event.type) {
                case SecurityEvent.INVALID_CREDENTIALS:
                    loginView.loginMessage = "Invalid username or password";
                    loginView.loggedIn = false;
                    break;
                case SecurityEvent.NOT_LOGGED_IN:
                    srv.logout();
                    loginView.loginMessage = "";
                    loginView.loggedIn = false;
                    break;
                case SecurityEvent.SESSION_EXPIRED:
                    srv.logout();
                    loginView.loginMessage = "Session expired";
                    loginView.loggedIn = false;
                    break;
                case SecurityEvent.ACCESS_DENIED:
                    Alert.show("You don't have required rights to execute this action");
                    break;
                }
            }

            public function onCredentialsSet(username:String, password:String):void {
                srv.setCredentials(username, password);
                srv.findAllPersons();
            }

            public function doLogout():void {
            	if (srv.channelSet)
            		srv.channelSet.logout();
                srv.logout();
                loginView.loggedIn = false;
                loginView.loginMessage = "";
            }

            public function onFindAllPersonsResult(event:ResultEvent):void {

                loginView.loggedIn = true;

                if (persons == null) {
                    personsModel = ArrayCollection(event.result);
                    return;
                }

                var selectedPerson:Person = Person(persons.selectedItem);
                var contactsSort:Sort = (contacts.dataProvider ? ArrayCollection(contacts.dataProvider).sort : null);

                var result:ArrayCollection = ArrayCollection(event.result);
                personsModel.removeAll();
                for (var i:int = 0; i < result.length; i++) {
                    var person:Person = Person(result.getItemAt(i));
                    if (selectedPerson && selectedPerson.uid == person.uid)
                        selectedPerson = person;
                    personsModel.addItem(person);
                }

                if (selectedPerson) {
                    persons.selectedItem = selectedPerson;
                    persons.selectedIndex = personsModel.getItemIndex(selectedPerson);
                }

                if (contactsSort) {
                    var contactsCollection:ArrayCollection = ArrayCollection(contacts.dataProvider);
                    contactsCollection.sort = contactsSort;
                    contactsCollection.refresh();
                }
            }

            private function onRemoteFault(event:FaultEvent):void {
                trace(ObjectUtil.toString(event.fault));
                Alert.show('Fault: ' + event.fault.faultCode + ' - ' + event.fault.faultString);
            }



            private function askDeletePerson():void {
                Alert.show('Do you really want to delete this person ?', 'Confirmation', (Alert.YES | Alert.NO), this,
                    function(event:CloseEvent):void {
                        if (event.detail == Alert.YES) {
                            srv.deletePerson(Person(persons.selectedItem));
                            srv.findAllPersons();
                        }
                    }
                );
            }

            private function askDeleteContact():void {
                Alert.show('Do you really want to delete this contact ?', 'Confirmation', (Alert.YES | Alert.NO), this,
                    function(event:CloseEvent):void {
                        if (event.detail == Alert.YES) {
                            srv.deleteContact(Contact(contacts.selectedItem));
                            srv.findAllPersons();
                        }
                    }
                );
            }

            private function createPerson():void {
                // casting for test purpose only...
                if (newPerson is DocumentedEntity) {
                    var doc:Document = new Document();
                    doc.name = 'test';
                    doc.contentType = 'text/plain';
                    doc.content = new ByteArray();
                    doc.content.writeUTFBytes(fCreatePersonComments.text);
                    (newPerson as DocumentedEntity).document = doc;
                }
                srv.createPerson(newPerson);
                srv.findAllPersons();
                currentState='';
            }

            private function modifyPerson():void {
                // casting for test purpose only...
                if (editPerson is DocumentedEntity) {
                    var doc:Document = (editPerson as DocumentedEntity).document;
                    if (!doc) {
                        doc = new Document();
                        doc.name = 'test';
                        doc.contentType = 'text/plain';
                    }
                    var comments:String = fEditPersonComments.text;
                    doc.content = new ByteArray();
                    doc.content.writeUTFBytes(comments);
                    (editPerson as DocumentedEntity).document = doc;
                }
                editPerson.firstName = fEditPersonFirstName.text;
                editPerson.lastName = fEditPersonLastName.text;
                srv.modifyPerson(editPerson);
                srv.findAllPersons();
                currentState='';
            }

            private function createContact():void {
                editPerson = Person(persons.selectedItem);
                var newContact:Contact = new Contact();
                newContact.person = editPerson;
                newContact.phone = fCreateContactPhone.text;
                newContact.mobile = fCreateContactMobile.text;
                newContact.fax = fCreateContactFax.text;
                newContact.email = fCreateContactEmail.text;
                newContact.address = new Address();
                newContact.address.address1 = fCreateContactAddress1.text;
                newContact.address.address2 = fCreateContactAddress2.text;
                newContact.address.zipcode = fCreateContactZipcode.text;
                newContact.address.city = fCreateContactCity.text;
                if (fCreateContactCountry.text.length > 0) {
                    newContact.address.country = new Country();
                    newContact.address.country.name = fCreateContactCountry.text;
                }
                editPerson.contacts.addItem(newContact);
                srv.modifyPerson(editPerson);
                srv.findAllPersons();
                currentState='';
            }

            private function modifyContact():void {
                editContact.phone = fEditContactPhone.text;
                editContact.mobile = fEditContactMobile.text;
                editContact.fax = fEditContactFax.text;
                editContact.email = fEditContactEmail.text;
                editContact.address.address1 = fEditContactAddress1.text;
                editContact.address.address2 = fEditContactAddress2.text;
                editContact.address.zipcode = fEditContactZipcode.text;
                editContact.address.city = fEditContactCity.text;
                if (editContact.address.country)
                    editContact.address.country.name = fEditContactCountry.text;
                srv.modifyPerson(editContact.person);
                srv.findAllPersons();
                currentState='';
            }
        ]]>
    </mx:Script>

    <et:Person id="editPerson" />
    <et:Person
        id="newPerson"
        firstName="{fCreatePersonFirstName.text}"
        lastName="{fCreatePersonLastName.text}"
    />

    <et:Contact id="newContact"/>
    <et:Contact id="editContact"/>

    <!--rs:SecureRemoteObject id="srv" showBusyCursor="true" destination="person" fault="onRemoteFault(event)">
        <mx:method name="findAllPersons" result="onFindAllPersonsResult(event)"/>
    </rs:SecureRemoteObject-->

    <mx:ViewStack id="appView" selectedIndex="{loginView.loggedIn ? 1 : 0}"  width="100%" height="100%">

        <mx:VBox width="100%" height="100%" verticalAlign="middle" horizontalAlign="center" >
            <Login id="loginView" onCredentialsSet="onCredentialsSet"/>
        </mx:VBox>

        <mx:VBox id="loggedInView">
            <mx:ApplicationControlBar id="acb" width="100%">
                <mx:Label text="Granite Data Services (Address Book Demo)" fontSize="18" fontWeight="bold" color="#f0f0f0"/>
                <mx:Spacer width="100%"/>
                <mx:Label text="Search" color="#f0f0f0"/>
                <mx:TextInput id="fSearch" enter="srv.findAllPersons(fSearch.text)"/>
                <mx:Button label="Go" click="srv.findAllPersons(fSearch.text)"/>
                <mx:Button label="Logout" click="doLogout()"/>
            </mx:ApplicationControlBar>

            <mx:HBox width="100%" height="100%">
                <mx:VBox width="300" height="100%" id="vbPersons">
                    <mx:Panel id="pPersons" title="Persons" width="100%" height="100%">
                        <cs:DataGrid id="persons" dataProvider="{personsModel}" width="100%" height="100%">
                            <cs:columns>
                                <!--cs:DataGridColumn dataField="id" headerText="Id"/-->
                                <cs:DataGridColumn dataField="firstName" headerText="First name"/>
                                <cs:DataGridColumn dataField="lastName" headerText="Last name"/>
                            </cs:columns>
                        </cs:DataGrid>

                        <mx:ControlBar>
                            <mx:Button label="New" click="currentState='CreatePerson'"/>
                            <mx:Button label="Edit" enabled="{Boolean(persons.selectedItem)}"
                                click="editPerson = Person(persons.selectedItem); currentState='EditPerson'"/>
                            <mx:Button label="Delete" enabled="{Boolean(persons.selectedItem)}" click="askDeletePerson();"/>
                        </mx:ControlBar>
                    </mx:Panel>
                </mx:VBox>

                <mx:VBox width="100%" height="100%" id="vbContacts">
                    <mx:Panel id="pContacts" title="Contacts" width="100%" height="100%">
                        <cs:DataGrid id="contacts" dataProvider="{Person(persons.selectedItem).contacts}" width="100%" height="100%">
                            <cs:columns>
                                <!--cs:DataGridColumn dataField="id" headerText="Id"/-->
                                <cs:DataGridColumn dataField="phone" headerText="Phone"/>
                                <cs:DataGridColumn dataField="mobile" headerText="Mobile"/>
                                <cs:DataGridColumn dataField="fax" headerText="Fax"/>
                                <cs:DataGridColumn dataField="email" headerText="Email"/>
                                <cs:DataGridColumn dataField="address.address1" headerText="Address 1"/>
                                <cs:DataGridColumn dataField="address.address2" headerText="Address 2"/>
                                <cs:DataGridColumn dataField="address.zipcode" headerText="Zipcode"/>
                                <cs:DataGridColumn dataField="address.city" headerText="City"/>
                                <cs:DataGridColumn dataField="address.country.name" headerText="Country"/>
                            </cs:columns>
                        </cs:DataGrid>

                        <mx:ControlBar>
                            <mx:Button label="New" enabled="{Boolean(persons.selectedItem)}" click="currentState='CreateContact'"/>
                            <mx:Button label="Edit" enabled="{Boolean(contacts.selectedItem)}"
                                click="editContact = Contact(contacts.selectedItem); currentState='EditContact'"/>
                            <mx:Button label="Delete" enabled="{Boolean(contacts.selectedItem)}" click="askDeleteContact()"/>
                        </mx:ControlBar>
                    </mx:Panel>
                </mx:VBox>
            </mx:HBox>
        </mx:VBox>

    </mx:ViewStack>

    <mx:states>
        <mx:State name="CreatePerson">
            <mx:AddChild relativeTo="{vbPersons}">
                <mx:Panel id="pNewPerson" title="New Person" width="100%">
                    <mx:Form width="100%" id="fCreatePerson">
                        <mx:FormItem label="First Name"><mx:TextInput id="fCreatePersonFirstName"/></mx:FormItem>
                        <mx:FormItem label="Last Name"><mx:TextInput id="fCreatePersonLastName"/></mx:FormItem>
                        <mx:FormItem label="Comments"><mx:TextInput id="fCreatePersonComments"/></mx:FormItem>
                    </mx:Form>

                    <mx:ControlBar>
                        <mx:Button label="Save" click="createPerson()"/>
                        <mx:Button label="Cancel" click="currentState=''"/>
                    </mx:ControlBar>
                </mx:Panel>
            </mx:AddChild>
            <mx:SetProperty target="{pPersons}" name="enabled" value="false"/>
            <mx:SetProperty target="{pContacts}" name="enabled" value="false"/>
        </mx:State>

        <mx:State name="EditPerson">
            <mx:AddChild relativeTo="{vbPersons}">
                <mx:Panel id="pEditPerson" title="Edit Person" width="100%">
                    <mx:Form width="100%" id="fEditPerson">
                        <mx:FormItem label="First Name"><mx:TextInput id="fEditPersonFirstName" text="{editPerson.firstName}"/></mx:FormItem>
                        <mx:FormItem label="Last Name"><mx:TextInput id="fEditPersonLastName" text="{editPerson.lastName}"/></mx:FormItem>
                        <mx:FormItem label="Comments"><mx:TextInput id="fEditPersonComments"
                            text="{
                                editPerson.document ?
                                editPerson.document.content.toString() :
                                ''
                            }"/>
                        </mx:FormItem>
                    </mx:Form>

                    <mx:ControlBar>
                        <mx:Button label="Save" click="modifyPerson()"/>
                        <mx:Button label="Cancel" click="currentState=''"/>
                    </mx:ControlBar>
                </mx:Panel>
            </mx:AddChild>
            <mx:SetProperty target="{pPersons}" name="enabled" value="false"/>
            <mx:SetProperty target="{pContacts}" name="enabled" value="false"/>
        </mx:State>

        <mx:State name="CreateContact">
            <mx:AddChild relativeTo="{vbContacts}">
                <mx:Panel id="pNewContact" title="New Contact" width="100%">
                    <mx:HBox width="100%">
                        <mx:Form width="50%">
                            <mx:FormItem label="Phone"><mx:TextInput id="fCreateContactPhone"/></mx:FormItem>
                            <mx:FormItem label="Mobile"><mx:TextInput id="fCreateContactMobile"/></mx:FormItem>
                            <mx:FormItem label="Fax"><mx:TextInput id="fCreateContactFax"/></mx:FormItem>
                            <mx:FormItem label="Email"><mx:TextInput id="fCreateContactEmail"/></mx:FormItem>
                        </mx:Form>
                        <mx:Form width="50%">
                            <mx:FormItem label="Address 1"><mx:TextInput id="fCreateContactAddress1"/></mx:FormItem>
                            <mx:FormItem label="Address 2"><mx:TextInput id="fCreateContactAddress2"/></mx:FormItem>
                            <mx:FormItem label="Zipcode"><mx:TextInput id="fCreateContactZipcode"/></mx:FormItem>
                            <mx:FormItem label="City"><mx:TextInput id="fCreateContactCity"/></mx:FormItem>
                            <mx:FormItem label="Country"><mx:TextInput id="fCreateContactCountry"/></mx:FormItem>
                        </mx:Form>
                    </mx:HBox>

                    <mx:ControlBar>
                        <mx:Button label="Save" click="createContact()"/>
                        <mx:Button label="Cancel" click="currentState=''"/>
                    </mx:ControlBar>
                </mx:Panel>
            </mx:AddChild>
            <mx:SetProperty target="{pPersons}" name="enabled" value="false"/>
            <mx:SetProperty target="{pContacts}" name="enabled" value="false"/>
        </mx:State>

        <mx:State name="EditContact">
            <mx:AddChild relativeTo="{vbContacts}">
                <mx:Panel id="pEditContact" title="Edit Contact" width="100%">
                    <mx:HBox width="100%">
                        <mx:Form width="50%">
                            <mx:FormItem label="Phone"><mx:TextInput id="fEditContactPhone" text="{editContact.phone}"/></mx:FormItem>
                            <mx:FormItem label="Mobile"><mx:TextInput id="fEditContactMobile" text="{editContact.mobile}"/></mx:FormItem>
                            <mx:FormItem label="Fax"><mx:TextInput id="fEditContactFax" text="{editContact.fax}"/></mx:FormItem>
                            <mx:FormItem label="Email"><mx:TextInput id="fEditContactEmail" text="{editContact.email}"/></mx:FormItem>
                        </mx:Form>
                        <mx:Form width="50%">
                            <mx:FormItem label="Address 1"><mx:TextInput id="fEditContactAddress1" text="{editContact.address.address1}"/></mx:FormItem>
                            <mx:FormItem label="Address 2"><mx:TextInput id="fEditContactAddress2" text="{editContact.address.address2}"/></mx:FormItem>
                            <mx:FormItem label="Zipcode"><mx:TextInput id="fEditContactZipcode" text="{editContact.address.zipcode}"/></mx:FormItem>
                            <mx:FormItem label="City"><mx:TextInput id="fEditContactCity" text="{editContact.address.city}"/></mx:FormItem>
                            <mx:FormItem label="Country"><mx:TextInput id="fEditContactCountry" text="{editContact.address.country.name}"/></mx:FormItem>
                        </mx:Form>
                    </mx:HBox>

                    <mx:ControlBar>
                        <mx:Button label="Save" click="modifyContact()"/>
                        <mx:Button label="Cancel" click="currentState=''"/>
                    </mx:ControlBar>
                </mx:Panel>
            </mx:AddChild>
            <mx:SetProperty target="{pPersons}" name="enabled" value="false"/>
            <mx:SetProperty target="{pContacts}" name="enabled" value="false"/>
        </mx:State>
    </mx:states>

</mx:Application>