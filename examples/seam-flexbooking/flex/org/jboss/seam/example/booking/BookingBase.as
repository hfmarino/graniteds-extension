/**
 * Generated by Gas3 v2.2.0 (Granite Data Services).
 *
 * WARNING: DO NOT CHANGE THIS FILE. IT MAY BE OVERWRITTEN EACH TIME YOU USE
 * THE GENERATOR. INSTEAD, EDIT THE INHERITED CLASS (Booking.as).
 */

package org.jboss.seam.example.booking {

    import flash.events.EventDispatcher;
    import flash.utils.IDataInput;
    import flash.utils.IDataOutput;
    import flash.utils.IExternalizable;
    import flash.utils.getQualifiedClassName;
    import mx.core.IUID;
    import mx.data.utils.Managed;
    import mx.utils.UIDUtil;
    import org.granite.collections.IPersistentCollection;
    import org.granite.meta;
    import org.granite.tide.IEntity;
    import org.granite.tide.IEntityManager;
    import org.granite.tide.IPropertyHolder;

    use namespace meta;

    [Managed]
    public class BookingBase implements IExternalizable, IUID {

        [Transient]
        meta var entityManager:IEntityManager = null;

        private var __initialized:Boolean = true;
        private var __detachedState:String = null;

        private var _beds:int;
        private var _checkinDate:Date;
        private var _checkoutDate:Date;
        private var _creditCard:String;
        private var _creditCardExpiryMonth:int;
        private var _creditCardExpiryYear:int;
        private var _creditCardName:String;
        private var _hotel:Hotel;
        private var _id:Number;
        private var _smoking:Boolean;
        private var _user:User;

        meta function isInitialized(name:String = null):Boolean {
            if (!name)
                return __initialized;

            var property:* = this[name];
            return (
                (!(property is Booking) || (property as Booking).meta::isInitialized()) &&
                (!(property is IPersistentCollection) || (property as IPersistentCollection).isInitialized())
            );
        }
        
        [Bindable(event="dirtyChange")]
		public function get meta_dirty():Boolean {
			return Managed.getProperty(this, "meta_dirty", false);
		}

        public function set beds(value:int):void {
            _beds = value;
        }
        public function get beds():int {
            return _beds;
        }

        public function set checkinDate(value:Date):void {
            _checkinDate = value;
        }
        public function get checkinDate():Date {
            return _checkinDate;
        }

        public function set checkoutDate(value:Date):void {
            _checkoutDate = value;
        }
        public function get checkoutDate():Date {
            return _checkoutDate;
        }

        public function set creditCard(value:String):void {
            _creditCard = value;
        }
        public function get creditCard():String {
            return _creditCard;
        }

        public function set creditCardExpiryMonth(value:int):void {
            _creditCardExpiryMonth = value;
        }
        public function get creditCardExpiryMonth():int {
            return _creditCardExpiryMonth;
        }

        public function set creditCardExpiryYear(value:int):void {
            _creditCardExpiryYear = value;
        }
        public function get creditCardExpiryYear():int {
            return _creditCardExpiryYear;
        }

        public function set creditCardName(value:String):void {
            _creditCardName = value;
        }
        public function get creditCardName():String {
            return _creditCardName;
        }

        public function set hotel(value:Hotel):void {
            _hotel = value;
        }
        public function get hotel():Hotel {
            return _hotel;
        }

        public function set id(value:Number):void {
            _id = value;
        }
        [Id]
        public function get id():Number {
            return _id;
        }

        public function set smoking(value:Boolean):void {
            _smoking = value;
        }
        public function get smoking():Boolean {
            return _smoking;
        }

        public function set user(value:User):void {
            _user = value;
        }
        public function get user():User {
            return _user;
        }

        public function set uid(value:String):void {
            // noop...
        }
        public function get uid():String {
            if (isNaN(_id))
                return UIDUtil.createUID();
            return getQualifiedClassName(this) + "#[" + String(_id) + "]";
        }

        meta function merge(em:IEntityManager, obj:*):void {
            var src:BookingBase = BookingBase(obj);
            __initialized = src.__initialized;
            __detachedState = src.__detachedState;
            if (meta::isInitialized()) {
               em.meta_mergeExternal(src._beds, _beds, null, this, 'beds', function setter(o:*):void{_beds = o as int}, false);
               em.meta_mergeExternal(src._checkinDate, _checkinDate, null, this, 'checkinDate', function setter(o:*):void{_checkinDate = o as Date}, false);
               em.meta_mergeExternal(src._checkoutDate, _checkoutDate, null, this, 'checkoutDate', function setter(o:*):void{_checkoutDate = o as Date}, false);
               em.meta_mergeExternal(src._creditCard, _creditCard, null, this, 'creditCard', function setter(o:*):void{_creditCard = o as String}, false);
               em.meta_mergeExternal(src._creditCardExpiryMonth, _creditCardExpiryMonth, null, this, 'creditCardExpiryMonth', function setter(o:*):void{_creditCardExpiryMonth = o as int}, false);
               em.meta_mergeExternal(src._creditCardExpiryYear, _creditCardExpiryYear, null, this, 'creditCardExpiryYear', function setter(o:*):void{_creditCardExpiryYear = o as int}, false);
               em.meta_mergeExternal(src._creditCardName, _creditCardName, null, this, 'creditCardName', function setter(o:*):void{_creditCardName = o as String}, false);
               em.meta_mergeExternal(src._hotel, _hotel, null, this, 'hotel', function setter(o:*):void{_hotel = o as Hotel}, false);
               em.meta_mergeExternal(src._id, _id, null, this, 'id', function setter(o:*):void{_id = o as Number}, false);
               em.meta_mergeExternal(src._smoking, _smoking, null, this, 'smoking', function setter(o:*):void{_smoking = o as Boolean}, false);
               em.meta_mergeExternal(src._user, _user, null, this, 'user', function setter(o:*):void{_user = o as User}, false);
            }
            else {
               em.meta_mergeExternal(src._id, _id, null, this, 'id', function setter(o:*):void{_id = o as Number});
            }
        }

        public function readExternal(input:IDataInput):void {
            __initialized = input.readObject() as Boolean;
            __detachedState = input.readObject() as String;
            if (meta::isInitialized()) {
                _beds = input.readObject() as int;
                _checkinDate = input.readObject() as Date;
                _checkoutDate = input.readObject() as Date;
                _creditCard = input.readObject() as String;
                _creditCardExpiryMonth = input.readObject() as int;
                _creditCardExpiryYear = input.readObject() as int;
                _creditCardName = input.readObject() as String;
                _hotel = input.readObject() as Hotel;
                _id = function(o:*):Number { return (o is Number ? o as Number : Number.NaN) } (input.readObject());
                _smoking = input.readObject() as Boolean;
                _user = input.readObject() as User;
            }
            else {
                _id = function(o:*):Number { return (o is Number ? o as Number : Number.NaN) } (input.readObject());
            }
        }

        public function writeExternal(output:IDataOutput):void {
            output.writeObject(__initialized);
            output.writeObject(__detachedState);
            if (meta::isInitialized()) {
                output.writeObject((_beds is IPropertyHolder) ? IPropertyHolder(_beds).object : _beds);
                output.writeObject((_checkinDate is IPropertyHolder) ? IPropertyHolder(_checkinDate).object : _checkinDate);
                output.writeObject((_checkoutDate is IPropertyHolder) ? IPropertyHolder(_checkoutDate).object : _checkoutDate);
                output.writeObject((_creditCard is IPropertyHolder) ? IPropertyHolder(_creditCard).object : _creditCard);
                output.writeObject((_creditCardExpiryMonth is IPropertyHolder) ? IPropertyHolder(_creditCardExpiryMonth).object : _creditCardExpiryMonth);
                output.writeObject((_creditCardExpiryYear is IPropertyHolder) ? IPropertyHolder(_creditCardExpiryYear).object : _creditCardExpiryYear);
                output.writeObject((_creditCardName is IPropertyHolder) ? IPropertyHolder(_creditCardName).object : _creditCardName);
                output.writeObject((_hotel is IPropertyHolder) ? IPropertyHolder(_hotel).object : _hotel);
                output.writeObject((_id is IPropertyHolder) ? IPropertyHolder(_id).object : _id);
                output.writeObject((_smoking is IPropertyHolder) ? IPropertyHolder(_smoking).object : _smoking);
                output.writeObject((_user is IPropertyHolder) ? IPropertyHolder(_user).object : _user);
            }
            else {
                output.writeObject(_id);
            }
        }
    }
}
