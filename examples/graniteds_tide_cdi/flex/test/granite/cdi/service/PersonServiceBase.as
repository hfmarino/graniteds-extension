/**
 * Generated by Gas3 v2.2.0 (Granite Data Services).
 *
 * WARNING: DO NOT CHANGE THIS FILE. IT MAY BE OVERWRITTEN EACH TIME YOU USE
 * THE GENERATOR. INSTEAD, EDIT THE INHERITED CLASS (PersonService.as).
 */

package test.granite.cdi.service {

    import flash.utils.flash_proxy;
    import org.granite.tide.BaseContext;
    import org.granite.tide.Component;
    import org.granite.tide.ITideResponder;
    import test.granite.cdi.entity.Person;
    
    use namespace flash_proxy;

    public class PersonServiceBase extends Component {

        public function createPerson(arg0:Person, resultHandler:Object = null, faultHandler:Function = null):void {
            if (faultHandler != null)
                callProperty("createPerson", arg0, resultHandler, faultHandler);
            else if (resultHandler is Function || resultHandler is ITideResponder)
                callProperty("createPerson", arg0, resultHandler);
            else if (resultHandler == null)
                callProperty("createPerson", arg0);
            else
                throw new Error("Illegal argument to remote call (last argument should be Function or ITideResponder): " + resultHandler);
        }

        public function modifyPerson(arg0:Person, resultHandler:Object = null, faultHandler:Function = null):void {
            if (faultHandler != null)
                callProperty("modifyPerson", arg0, resultHandler, faultHandler);
            else if (resultHandler is Function || resultHandler is ITideResponder)
                callProperty("modifyPerson", arg0, resultHandler);
            else if (resultHandler == null)
                callProperty("modifyPerson", arg0);
            else
                throw new Error("Illegal argument to remote call (last argument should be Function or ITideResponder): " + resultHandler);
        }

        public function deletePerson(arg0:Number, resultHandler:Object = null, faultHandler:Function = null):void {
            if (faultHandler != null)
                callProperty("deletePerson", arg0, resultHandler, faultHandler);
            else if (resultHandler is Function || resultHandler is ITideResponder)
                callProperty("deletePerson", arg0, resultHandler);
            else if (resultHandler == null)
                callProperty("deletePerson", arg0);
            else
                throw new Error("Illegal argument to remote call (last argument should be Function or ITideResponder): " + resultHandler);
        }
    }
}
